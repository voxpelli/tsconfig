name: Test External

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      moduleSet:
        description: 'Module set'
        required: true
        default: 'nonCompliant'
        type: choice
        options:
        - compliant
        - nonCompliant

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  read_external_projects:
    name: Read list of ${{ github.event.inputs.moduleSet || 'compliant' }} external projects
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: echo "matrix=$(cat workflow-external.json | jq -c '.${{ github.event.inputs.moduleSet || 'compliant' }}')" >> $GITHUB_OUTPUT
  test_external:
    needs: read_external_projects
    name: Test ${{ matrix.project }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node_version: [lts/*]
        project: ${{ fromJson(needs.read_external_projects.outputs.matrix) }}
    steps:
      - name: Checkout main project
        uses: actions/checkout@v3
        with:
          path: main
      - name: Checkout ${{ matrix.project }}
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.project }}
          path: project
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}

      - name: install main
        run: '[ -f package-lock.json ] && npm ci --ignore-scripts --force || npm install --ignore-scripts --force'
        working-directory: ./main
      - name: install project
        run: '[ -f package-lock.json ] && npm ci --ignore-scripts --force || npm install --ignore-scripts --force'
        working-directory: ./project

      - name: Get target TS version
        id: target-ts
        run: echo "TS_VERSION=$(npm list typescript --depth=0 | grep typescript@ | sed 's/^[^@]*@//')" >> $GITHUB_OUTPUT
        working-directory: ./main
      - name: install typescript version ${{ steps.target-ts.outputs.TS_VERSION }}
        run: npm install --force typescript@${{ steps.target-ts.outputs.TS_VERSION }}
        working-directory: ./project
      - name: show installed typescript version
        run: npx tsc --version
        working-directory: ./project

      - name: build project if needed
        run: npm run build-for-test --if-present
        working-directory: ./project

      - name: modify project config
        run: sed 's/"@voxpelli\/tsconfig\//"..\/main\//' tsconfig.json > tmp.tsconfig.json && rm tsconfig.json && mv tmp.tsconfig.json tsconfig.json
        working-directory: ./project
      - name: show modified config
        run: cat tsconfig.json
        working-directory: ./project

      - run: npx tsc
        working-directory: ./project
